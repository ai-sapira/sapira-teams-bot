const { GoogleGenerativeAI } = require('@google/generative-ai');
const { getGonvarriContext, inferBusinessUnit, inferProject } = require('./gonvarri-knowledge');

class GeminiService {
  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY environment variable is required');
    }
    
    this.client = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  }

  /**
   * Determines if we have enough information to create an initiative
   */
  async shouldCreateTicket(conversation) {
    // ‚≠ê NUEVO: Requisitos m√≠nimos m√°s estrictos
    const messageCount = conversation.messages.length;
    
    // Si es el primer mensaje, NUNCA crear ticket
    if (messageCount <= 1) {
      return false;
    }
    
    // Si hay menos de 4 mensajes (2 intercambios), probablemente no hay info suficiente
    if (messageCount < 4) {
      return false;
    }

    const prompt = `
Analiza esta conversaci√≥n entre un usuario y Sapira (asistente de IA):

${conversation.getHistory()}

¬øTienes suficiente contexto para generar una propuesta de initiative coherente?

‚ö†Ô∏è CRITERIO ESTRICTO:

‚úÖ SUFICIENTE SI (TODOS los puntos):
1. El usuario explic√≥ QU√â proceso/problema espec√≠fico quiere resolver
2. El usuario mencion√≥ o se puede inferir C√ìMO lo quiere resolver (tecnolog√≠a, enfoque)
3. Se mencion√≥ o se puede inferir el beneficio/impacto esperado
4. Hay suficiente detalle para escribir una descripci√≥n con sentido

‚ùå INSUFICIENTE SI (cualquiera):
- Solo hubo saludos o mensajes muy vagos
- El usuario solo hizo preguntas gen√©ricas sin explicar su caso
- Falta el QU√â (el problema/proceso espec√≠fico)
- Falta el C√ìMO (la tecnolog√≠a/enfoque)
- La conversaci√≥n es ambigua o abstracta
- El usuario todav√≠a est√° explorando sin una idea clara

üéØ IMPORTANTE:
- S√â CONSERVADOR: mejor pedir m√°s info que crear ticket prematuro
- Si tienes dudas, responde false
- Solo di true si est√°s SEGURO de que hay suficiente para una propuesta s√≥lida

EJEMPLOS:

‚ùå INSUFICIENTE:
user: "Buenas"
bot: "¬°Hola! ¬øEn qu√© puedo ayudarte?"
user: "Quiero hacer algo con IA"
bot: "¬øQu√© te gustar√≠a automatizar o mejorar?"
RESPUESTA: false (muy vago, sin detalles)

‚ùå INSUFICIENTE:
user: "Tengo un problema con las facturas"
bot: "Cu√©ntame m√°s"
user: "Llegan por email y es un l√≠o"
RESPUESTA: false (falta c√≥mo quiere resolverlo, qu√© tecnolog√≠a)

‚ùå INSUFICIENTE:
user: "Hola, tengo una idea"
bot: "¬°Hola! ¬øDe qu√© va?"
user: "Quiero automatizar las facturas"
bot: "Interesante, ¬øqu√© parte exactamente?"
RESPUESTA: false (muy vago a√∫n, falta contexto)

‚úÖ SUFICIENTE:
user: "Quiero automatizar el procesamiento de facturas que llegan por email"
bot: "¬øQu√© os lleva m√°s tiempo?"
user: "Tenemos que leer cada una y meter los datos en SAP manualmente, unas 500 al mes"
bot: "¬øQu√© beneficio esperar√≠as?"
user: "Ahorrar tiempo, ahora nos lleva horas"
RESPUESTA: true (problema claro, volumen claro, tecnolog√≠a impl√≠cita: IDP/RPA, beneficio claro)

‚úÖ SUFICIENTE:
user: "Necesitamos un chatbot con IA para responder preguntas de RRHH"
bot: "¬øQu√© tipo de preguntas recib√≠s m√°s?"
user: "Pol√≠ticas, vacaciones, n√≥minas... siempre las mismas"
bot: "¬øCu√°nto tiempo os consume esto?"
user: "El equipo de HR pasa 10 horas a la semana en esto"
RESPUESTA: true (problema claro, enfoque claro: chatbot GenAI, beneficio claro: ahorro tiempo)

Responde SOLO: true o false`;

    try {
      const model = this.client.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
      const response = await model.generateContent(prompt);
      const responseText = response.response.text().toLowerCase().trim();
      
      const shouldCreate = responseText.includes('true');
      console.log(`ü§î shouldCreateTicket: ${shouldCreate} (messages: ${messageCount})`);
      
      return shouldCreate;
    } catch (error) {
      console.error('Error checking if should create ticket:', error);
      
      // ‚≠ê NUEVO: Fallback m√°s conservador
      // Solo crear si hay MUCHOS mensajes (10+) asumiendo que ya hubo conversaci√≥n larga
      const shouldCreate = messageCount >= 10;
      console.log(`‚ö†Ô∏è Gemini failed, using fallback: ${shouldCreate} (messages: ${messageCount})`);
      return shouldCreate;
    }
  }

  /**
   * Continues conversation by asking relevant questions
   */
  async continueConversation(conversation) {
    const prompt = `
Eres Sapira, asistente de IA para Gonvarri especializado en ayudar a las personas a documentar sus ideas de automatizaci√≥n e IA.

PERSONALIDAD:
- Natural y conversacional, como un compa√±ero de trabajo √∫til
- Emp√°tico y adaptable al tono del usuario (formal/informal)
- Curioso e interesado genuinamente en entender el problema
- Paciente, sin presionar por informaci√≥n
- Usas lenguaje natural, no hablas como formulario

CONTEXTO DE LA CONVERSACI√ìN:
${conversation.getHistory()}

TU OBJETIVO (sin ser obvio):
Entender la idea/problema del usuario para ayudarle a crear una initiative bien documentada. Necesitas captar:
1. El problema o proceso que quieren mejorar/automatizar
2. Qu√© tecnolog√≠a o enfoque est√°n considerando (IA, RPA, Analytics, etc.)
3. Qu√© beneficio o impacto esperan conseguir
4. Qui√©n se beneficiar√≠a (departamento, equipo)

IMPORTANTE:
- NO hagas preguntas mec√°nicas tipo checklist
- SI el usuario SOLO saluda (ej: "Hola", "Buenas", "Hey"), devuelve saludo + pregunta abierta simple
- SI el usuario da info vaga, pide M√ÅS contexto espec√≠fico
- SI el usuario hace una pregunta off-topic, responde brevemente y redirige con naturalidad
- SI el usuario da mucha info de golpe, reconoce lo que entendiste y pregunta por lo que falta
- SI el usuario parece frustrado o perdido, s√© m√°s guiador y emp√°tico
- ADAPTA tu tono al del usuario (si es informal, s√© informal; si es formal, mant√©n profesionalismo)
- Mant√©n respuestas cortas (m√°ximo 2-3 frases), conversacionales

EJEMPLOS DE C√ìMO RESPONDER:

Usuario: "Buenas"
‚úÖ Bueno: "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?"
‚ùå Malo: "¬°Hola! Me encantar√≠a escuchar tu idea. ¬øDe qu√© va?"

Usuario: "Hola, tengo una idea"
‚úÖ Bueno: "¬°Hola! Cu√©ntame, ¬øde qu√© va?"
‚ùå Malo: "Por favor describe el proceso que quieres automatizar."

Usuario: "Nada, solo saludaba"
‚úÖ Bueno: "Entendido, aqu√≠ estoy si necesitas algo üëç"
‚ùå Malo: "¬øSeguro que no tienes ninguna idea sobre automatizaci√≥n?"

Usuario: "Quiero automatizar algo"
‚úÖ Bueno: "Vale, ¬øqu√© proceso o problema tienes en mente?"
‚ùå Malo: "¬øQu√© tecnolog√≠a considerar√≠as?"

Usuario: "Quiero automatizar las facturas que llegan por email"
‚úÖ Bueno: "Interesante, las facturas por email son un buen caso. ¬øQu√© es lo que m√°s tiempo os lleva ahora con ellas?"
‚ùå Malo: "¬øQu√© tecnolog√≠a considerar√≠as para este proyecto?"

Usuario: "¬øT√∫ qu√© piensas que ser√≠a mejor?"
‚úÖ Bueno: "Por lo que me cuentas, suena a que IDP podr√≠a ir bien. Pero cu√©ntame, ¬øahora los ten√©is que meter a mano?"
‚ùå Malo: "Por favor especifica el impacto en el negocio primero."

Responde de forma NATURAL como Sapira. Solo el mensaje, sin prefijos:`;

    try {
      const model = this.client.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
      const response = await model.generateContent(prompt);
      return response.response.text().trim();
    } catch (error) {
      console.error('Error continuing conversation:', error);
      return "Cu√©ntame m√°s sobre la initiative que tienes en mente.";
    }
  }

  /**
   * Analyzes user feedback on ticket proposal
   */
  async analyzeTicketFeedback(userResponse, ticketProposal) {
    const prompt = `
Eres Sapira. Le mostraste al usuario esta propuesta de initiative:

üìã **${ticketProposal.title}**
üìù ${ticketProposal.description}
üîç Prioridad: ${ticketProposal.priority}

El usuario respondi√≥: "${userResponse}"

Analiza su intenci√≥n de forma natural:

1. CONFIRM - Est√° de acuerdo y quiere crear el ticket
   - Ejemplos: "s√≠", "ok", "perfecto", "adelante", "crear", "me parece bien", "vale"
   - Tambi√©n frases como "s√≠ pero cambiarle el t√≠tulo" ‚Üí CONFIRM (cambios menores no impiden creaci√≥n)

2. REJECT - No quiere crear el ticket o abandonar
   - Ejemplos: "no", "cancelar", "olv√≠dalo", "d√©jalo", "mejor no"
   - Claramente rechaza la idea

3. MODIFY - Quiere hacer cambios significativos antes de crear
   - Ejemplos: "falta mencionar X", "la prioridad deber√≠a ser mayor", "no es para ese equipo"
   - Pide cambios sustanciales que requieren regenerar propuesta

4. UNCLEAR - No est√° claro qu√© quiere (pregunta algo, divaga, etc.)
   - Ejemplos: "¬øy esto cu√°nto tardar√≠a?", "¬øqui√©n lo va a hacer?", respuestas vagas
   - Necesita aclaraci√≥n antes de decidir

Responde SOLO con JSON v√°lido:
{
  "action": "confirm|reject|modify|unclear",
  "changes": "descripci√≥n espec√≠fica de cambios si action es modify/unclear, null si confirm/reject",
  "natural_response": "mensaje natural de 1-2 frases para responder al usuario seg√∫n su feedback",
  "confidence": "high|medium|low"
}

EJEMPLOS de natural_response:

Si CONFIRM: "¬°Genial! Creo tu ticket ahora mismo."
Si REJECT: "Entendido, lo dejamos. Si m√°s adelante quieres retomarlo, aqu√≠ estar√©."
Si MODIFY con cambios de prioridad: "Vale, ¬øqu√© prioridad crees que deber√≠a tener? ¬øEs algo urgente o puede esperar?"
Si UNCLEAR: "Mmm, no estoy seguro de si quieres que lo cree as√≠ o prefieres cambiar algo. ¬øTe parece bien como est√°?"`;

    try {
      const model = this.client.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
      const response = await model.generateContent(prompt);
      const responseText = response.response.text().trim();
      
      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }
      
      const feedback = JSON.parse(jsonMatch[0]);
      
      return {
        action: feedback.action || 'modify',
        changes: feedback.changes || null,
        natural_response: feedback.natural_response || '¬øQu√© te gustar√≠a cambiar?',
        confidence: feedback.confidence || 'medium'
      };
      
    } catch (error) {
      console.error('Error analyzing ticket feedback:', error);
      
      // Simple fallback logic
      const lowerResponse = userResponse.toLowerCase().trim();
      
      if (['si', 's√≠', 'ok', 'vale', 'correcto', 'adelante', 'crear', 'yes', 'perfecto'].some(word => lowerResponse.includes(word))) {
        return { 
          action: 'confirm', 
          changes: null, 
          natural_response: '¬°Genial! Creo tu ticket ahora mismo.',
          confidence: 'medium' 
        };
      } else if (['no', 'cancelar', 'olvidar', 'olvida', 'd√©jalo'].some(word => lowerResponse.includes(word))) {
        return { 
          action: 'reject', 
          changes: null,
          natural_response: 'Entendido, lo dejamos. Si m√°s adelante quieres retomarlo, aqu√≠ estar√©.',
          confidence: 'medium' 
        };
      } else {
        return { 
          action: 'modify', 
          changes: userResponse,
          natural_response: '¬øQu√© te gustar√≠a cambiar de la propuesta?',
          confidence: 'low' 
        };
      }
    }
  }

  /**
   * Generates initiative proposal based on conversation
   */
  async generateTicketProposal(conversation) {
    // Inferir Business Unit y Project del contexto
    const fullText = conversation.getHistory().toLowerCase()
    const inferredBU = inferBusinessUnit(fullText)
    const inferredProject = inferProject(fullText, inferredBU)
    
    const prompt = `
Conversaci√≥n sobre initiative de automatizaci√≥n/IA:
${conversation.getHistory()}

${getGonvarriContext()}

Genera una initiative basada en esta conversaci√≥n. Responde SOLO con JSON v√°lido:

{
  "title": "Nombre CORTO del proyecto (m√°x 50 chars, 2-4 palabras idealmente, ej: 'InvoiceGenius', 'HRChatbot GenAI', 'SmartBidder')",
  "short_description": "Descripci√≥n breve del alcance en 1 l√≠nea (m√°x 80 chars)",
  "description": "Descripci√≥n NARRATIVA de 3-5 frases explicando: (1) qu√© problema resuelve, (2) c√≥mo funciona ahora, (3) c√≥mo funcionar√° con la soluci√≥n y tecnolog√≠a, (4) beneficio esperado. IMPORTANTE: SOLO texto narrativo en p√°rrafo, NO incluir metadatos estructurados como 'Business Unit:', 'Project:', 'Impact:', etc.",
  "impact": "Impacto en el negocio en UNA l√≠nea (m√°x 50 chars, ej: 'Reduced repetitive tasks', 'Increased productivity')",
  "core_technology": "Tecnolog√≠a core a usar (ej: 'Predictive AI', 'RPA + IDP', 'GenAI')",
  "difficulty": 1|2|3,
  "impact_score": 1|2|3,
  "priority": "P0|P1|P2|P3",
  "business_unit": "Finance|Sales|Legal|HR|Procurement (inferir del contenido)",
  "project": "Pricing|Invoicing|Advisory|NPS|Operations|etc (inferir del BU y contenido)",
  "origin": "teams",
  "suggested_labels": ["etiqueta1", "etiqueta2"],
  "assignee_suggestion": "Tech Team|Product Team|AI Team",
  "confidence": "high|medium|low"
}

EJEMPLOS DE T√çTULOS CORRECTOS:
‚ùå "Bot automating CET info to proposals" (muy largo, 7 palabras)
‚úÖ "GMHS Offer Automation" (perfecto, 3 palabras)

‚ùå "GenAI chatbot for HR employee queries and support" (muy largo)
‚úÖ "HRChatbot GenAI" (perfecto, 2 palabras)

‚ùå "Automated system for invoice data extraction" (muy largo)
‚úÖ "InvoiceGenius" (ideal, 1 palabra creativa)

‚úÖ "FraudFinder AI" (perfecto, 2 palabras)
‚úÖ "SmartBidder" (ideal, 1 palabra)
‚úÖ "ComplyStreamline" (perfecto, 1 palabra)

EJEMPLOS DE DESCRIPCI√ìN (description) CORRECTA:

‚úÖ CORRECTO (narrativa de 3-5 frases):
"This initiative aims to automate the extraction of CET information and populate it into proposal documents. Currently, sales representatives manually copy this data from internal systems, which is time-consuming and error-prone. The bot will utilize RPA to extract data from CET databases and IDP to intelligently insert it into proposal templates. This will reduce repetitive tasks and improve accuracy while freeing up sales time for higher-value activities."

‚ùå INCORRECTO (metadatos estructurados):
"Business Unit: Sales
Project: Processing

Bot automating CET info to proposals

Impact: Reduced repetitive tasks
Core Technology: Data + RPA + IDP"

REGLAS IMPORTANTES:
- title: M√ÅXIMO 50 caracteres, preferiblemente 2-4 palabras
- description: SOLO texto narrativo en p√°rrafo, SIN metadatos estructurados

TECNOLOG√çAS CORE COMUNES:
- GenAI (Chatbot) - asistentes virtuales
- GenAI (Copilot) - asistentes de trabajo
- GenAI (Translation) - traducci√≥n
- Predictive AI - predicciones y detecci√≥n
- RPA - automatizaci√≥n de procesos
- IDP - procesamiento inteligente de documentos
- Advanced Analytics - an√°lisis avanzados
- Combinaciones: "RPA + IDP", "GenAI + Analytics", "IDP + Predictive AI"

IMPACTOS COMUNES:
- "Reduced repetitive tasks" - reducci√≥n tareas manuales
- "Increased productivity" - aumento productividad
- "Reduced processing costs" - reducci√≥n costes
- "Improve decision-making" - mejora toma de decisiones
- "Reduce time on investigations" - reducci√≥n tiempo investigaciones

DIFFICULTY (complejidad t√©cnica):
- 1: Soluci√≥n simple, tecnolog√≠a madura, pocas integraciones
- 2: Complejidad media, requiere integraci√≥n, desarrollo moderado
- 3: Alta complejidad, tecnolog√≠a emergente, m√∫ltiples sistemas

IMPACT_SCORE (impacto en negocio):
- 1: Mejora menor, afecta pocos usuarios/procesos
- 2: Mejora significativa, afecta departamento
- 3: Impacto cr√≠tico, afecta toda la organizaci√≥n

C√ÅLCULO DE PRIORIDAD (difficulty + impact_score):
- Total 6: P0 (Cr√≠tica)
- Total 5: P1 (Alta)  
- Total 3-4: P2 (Media)
- Total 2: P3 (Baja)

LABELS COMUNES:
automation, ai, rpa, genai, predictive-ai, analytics, idp, finance, operations, hr, sales, process-improvement

ASSIGNEE:
- AI Team: initiatives de IA, ML, automatizaci√≥n inteligente
- Tech Team: desarrollo t√©cnico, integraciones
- Product Team: funcionalidades, mejoras de producto

CONFIDENCE:
- high: initiative clara con tecnolog√≠a e impacto bien definidos
- medium: initiative identificada pero faltan algunos detalles
- low: idea vaga o informaci√≥n incompleta`;

    try {
      const model = this.client.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
      const response = await model.generateContent(prompt);
      const responseText = response.response.text().trim();
      
      // Extract JSON from response
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in response');
      }
      
      const ticketData = JSON.parse(jsonMatch[0]);
      
      // Validate required fields
      if (!ticketData.title || !ticketData.priority || !ticketData.difficulty || !ticketData.impact_score) {
        throw new Error('Missing required fields in ticket proposal');
      }

      // Calculate priority from difficulty + impact_score
      const totalScore = ticketData.difficulty + ticketData.impact_score;
      let calculatedPriority;
      if (totalScore === 6) calculatedPriority = 'P0';
      else if (totalScore === 5) calculatedPriority = 'P1';
      else if (totalScore >= 3) calculatedPriority = 'P2';
      else calculatedPriority = 'P3';
      
      // Use Gemini's suggestion or fallback to inferred values
      const businessUnit = ticketData.business_unit || inferredBU || 'Finance'
      const project = ticketData.project || inferredProject || null
      
      return {
        title: ticketData.title,
        short_description: ticketData.short_description || ticketData.title,
        description: ticketData.description || 'Descripci√≥n generada autom√°ticamente desde conversaci√≥n de Teams',
        impact: ticketData.impact || 'Por determinar',
        core_technology: ticketData.core_technology || 'Por determinar',
        difficulty: ticketData.difficulty,
        impact_score: ticketData.impact_score,
        priority: calculatedPriority,
        business_unit: businessUnit,
        project: project,
        origin: 'teams',
        suggested_labels: ticketData.suggested_labels || [],
        assignee_suggestion: ticketData.assignee_suggestion || 'AI Team',
        confidence: ticketData.confidence || 'medium'
      };
      
    } catch (error) {
      console.error('Error generating ticket proposal:', error);
      
      // Fallback ticket generation with inferred values
      return {
        title: 'Initiative reportada desde Teams',
        short_description: 'Initiative de automatizaci√≥n/IA',
        description: `Initiative generada autom√°ticamente desde conversaci√≥n de Teams:\n\n${conversation.getHistory()}`,
        impact: 'Por determinar',
        core_technology: 'Por determinar',
        difficulty: 2,
        impact_score: 2,
        priority: 'P2',
        business_unit: inferredBU || 'Finance',
        project: inferredProject || null,
        origin: 'teams',
        suggested_labels: ['teams', 'auto-generated'],
        assignee_suggestion: 'AI Team',
        confidence: 'low'
      };
    }
  }
}

module.exports = { GeminiService };